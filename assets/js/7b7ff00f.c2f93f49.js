"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8095],{52650:e=>{e.exports=JSON.parse('{"functions":[{"name":"ValidateDamageBrick","desc":"Function internally used to validate a damage brick\'s damage value.\\nThis also checks whether the damage brick is deactivated or not.","params":[{"name":"brick","desc":"","lua_type":"BasePart"}],"returns":[],"function_type":"method","source":{"line":133,"path":"mirror/Kit.Managers.CharacterManager.luau"}},{"name":"Damage","desc":"Fires the DamageEvent with the given `damage` value.\\n`damage` can be either a `number`, or a `string` representing a key in the\\n`VALID_DAMAGEBRICKS` table.","params":[{"name":"damage","desc":"","lua_type":"BasePart | string | number"}],"returns":[],"function_type":"method","source":{"line":161,"path":"mirror/Kit.Managers.CharacterManager.luau"}},{"name":"GetHumanoid","desc":"Returns the `player`\'s `Humanoid` if it exists.","params":[{"name":"player","desc":"","lua_type":"Player"}],"returns":[{"desc":"","lua_type":"Humanoid?\\n"}],"function_type":"method","source":{"line":184,"path":"mirror/Kit.Managers.CharacterManager.luau"}},{"name":"StartBoost","desc":"Starts a boost with the given boost data.\\nIf a boost with the given type is already active, the already active boost will be\\nrefreshed instead of a new boost being started.","params":[{"name":"boostData","desc":"","lua_type":"_TDefs.BoostData"}],"returns":[],"function_type":"method","source":{"line":200,"path":"mirror/Kit.Managers.CharacterManager.luau"}},{"name":"UpdateBoost","desc":"Updates the currently active boost with the given type, updating the affected property.\\nIf `boostEnded` is `true`, the character will return to it\'s default properties\\nrather than using the boost\'s power.","params":[{"name":"boostData","desc":"","lua_type":"_TDefs.BoostData"},{"name":"boostEnded","desc":"","lua_type":"boolean?"}],"returns":[],"function_type":"method","source":{"line":261,"path":"mirror/Kit.Managers.CharacterManager.luau"}},{"name":"RemoveBoost","desc":"Ends the currently active boost with the given type.","params":[{"name":"boostType","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":289,"path":"mirror/Kit.Managers.CharacterManager.luau"}},{"name":"GetActiveBoosts","desc":"Returns a table containing the currently active boosts.","params":[],"returns":[{"desc":"","lua_type":"{ [string]: _TDefs.BoostData? }\\n"}],"function_type":"method","source":{"line":302,"path":"mirror/Kit.Managers.CharacterManager.luau"}},{"name":"ActivateBoostPad","desc":"Activates a boost pad with the given `boostType` and `power`.","params":[{"name":"boostType","desc":"","lua_type":"string"},{"name":"power","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":311,"path":"mirror/Kit.Managers.CharacterManager.luau"}},{"name":"UpdateBoostPad","desc":"Updates a boost pad\'s boost with the given `boostType` and `number`, updating\\nthe affected property accordingly.","params":[{"name":"boostType","desc":"","lua_type":"string"},{"name":"power","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":322,"path":"mirror/Kit.Managers.CharacterManager.luau"}},{"name":"DeactivateBoostPad","desc":"Deactivates a boost pad with the given `boostType`.\\nIf a regular booster is currently active, the player will revert to that booster\'s power.\\nOtherwise, the player will revert to the default power.","params":[{"name":"boostType","desc":"","lua_type":"string"}],"returns":[],"function_type":"method","source":{"line":342,"path":"mirror/Kit.Managers.CharacterManager.luau"}},{"name":"GetActiveBoostPads","desc":"Returns a table containing the currently active boost pads,\\nwith the key being the boost\'s type and the value being the boost\'s power.","params":[],"returns":[{"desc":"","lua_type":"{ [string]: number? }\\n"}],"function_type":"method","source":{"line":359,"path":"mirror/Kit.Managers.CharacterManager.luau"}}],"properties":[],"types":[{"name":"BoostData","desc":"","fields":[{"name":"startTime","lua_type":"number","desc":""},{"name":"mode","lua_type":"string","desc":""},{"name":"type","lua_type":"string","desc":""},{"name":"power","lua_type":"number","desc":""},{"name":"duration","lua_type":"number","desc":""},{"name":"timerDecimals","lua_type":"number","desc":""},{"name":"startTweenInfo","lua_type":"TweenInfo","desc":""},{"name":"endTweenInfo","lua_type":"TweenInfo","desc":""}],"source":{"line":25,"path":"mirror/Kit.Managers.CharacterManager.TypeDefs.luau"}}],"name":"CharacterManager","desc":"Manager module for character-related things such as collisions, damage\\nbricks, and boosts.\\n\\nCurrently, the valid types for Boosters and Boost Pads are:\\n* `Speed` for WalkSpeed\\n* `Jump` for JumpPower","realm":["Client"],"source":{"line":32,"path":"mirror/Kit.Managers.CharacterManager.luau"}}')}}]);