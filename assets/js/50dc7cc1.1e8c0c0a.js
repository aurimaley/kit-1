"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8117],{881:e=>{e.exports=JSON.parse('{"functions":[{"name":"isButtonActivatedPlatform","desc":"This function is used to check if the provided `Instance`\\nis a ButtonActivatedPlatform.\\n\\nThis will return `true` if it is a `BasePart` and meets\\none of the following requirements:\\n\\t\\n* Is named `ButtonActivatedPlatform`\\n* Has a tag named `ButtonActivated`","params":[{"name":"platform","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","tags":["shorthand"],"source":{"line":38,"path":"mirror/Kit.Utility.ClientObjects.luau"}},{"name":"isBalloon","desc":"This function is used to check if the provided `Instance` \\nis part of a dispensed Balloon.\\n\\nThis will return `true` if it meets one of the following requirements:\\n\\t\\n* Is named `BalloonModel`\\n* If `doNotCheckAncestor` is not `true` and the `Instance` has an ancestor\\nnamed `BalloonModel`","params":[{"name":"parent","desc":"","lua_type":"Instance"},{"name":"doNotCheckAncestor","desc":"","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","tags":["shorthand"],"source":{"line":59,"path":"mirror/Kit.Utility.ClientObjects.luau"}},{"name":"isTurret","desc":"This function is used to check if the provided `Instance` \\nis part of a Turret\'s bullet.\\n\\nThis will return `true` if it meets one of the following requirements:\\n\\n* Is named `Bullet`\\n* If `doNotCheckAncestor` is not `true` and the `Instance` has an ancestor\\nnamed `Bullet`\\n\\t","params":[{"name":"parent","desc":"","lua_type":"Instance"},{"name":"doNotCheckAncestor","desc":"","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","tags":["shorthand"],"source":{"line":81,"path":"mirror/Kit.Utility.ClientObjects.luau"}},{"name":"isPushbox","desc":"This function is used to check if the provided `Instance` \\nis part of a Pushbox.\\nThis will return `true` if it meets one of the following requirements:\\n\\n* Is named `Pushbox`\\n* Has a tag named `IsBox`\\n* If `doNotCheckAncestor` is not `true` and the `Instance` has an ancestor\\nnamed `Pushbox`","params":[{"name":"parent","desc":"","lua_type":"Instance"},{"name":"doNotCheckAncestor","desc":"","lua_type":"boolean?"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","tags":["shorthand"],"source":{"line":101,"path":"mirror/Kit.Utility.ClientObjects.luau"}},{"name":"evaluateToucher","desc":"This function checks if two `BasePart`s (`part` and `toucher`) touching\\nis considered valid or not, based on the provided `config`.\\n\\nA touch configuration has the following settings:\\n* `player`: Valid if `toucher` is part of the player\'s character\\n* `pushbox`: Valid if `ClientObjects.isPushbox` returns `true`\\n* `balloon`: Valid if `ClientObjects.isBalloon` returns `true`\\n* `turret`: Valid if `ClientObjects.isTurret` returns `true`\\n* `colorSpecific`: For every setting except `player`, `toucher`\'s color\\nmust match `part`\'s color for the collision to be considered valid.","params":[{"name":"part","desc":"","lua_type":"BasePart"},{"name":"toucher","desc":"","lua_type":"BasePart"},{"name":"config","desc":"","lua_type":"(Instance | typeof(Config.TOUCH_CONFIG))?\\n"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":124,"path":"mirror/Kit.Utility.ClientObjects.luau"}},{"name":"bindToFlip","desc":"Binds the `callback` function to the `part`, executing the callback when\\nthe player performs a corner flip on it.","params":[{"name":"part","desc":"","lua_type":"BasePart"},{"name":"callback","desc":"","lua_type":"() -> ()"}],"returns":[{"desc":"","lua_type":"() -> ()\\n"}],"function_type":"static","source":{"line":168,"path":"mirror/Kit.Utility.ClientObjects.luau"}},{"name":"isInstanceActive","desc":"Returns whether the provided `Instance` is active or not.\\nTODO explain more","params":[{"name":"scope","desc":"","lua_type":"Scope"},{"name":"instance","desc":"","lua_type":"Instance"},{"name":"ignoreList","desc":"","lua_type":"{ [string]: boolean }?"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":178,"path":"mirror/Kit.Utility.ClientObjects.luau"}},{"name":"listenInstanceActive","desc":"Listens to the `Instance`\'s activeness, executing the `callback` when\\nit\'s activeness changes.","params":[{"name":"scope","desc":"","lua_type":"Scope"},{"name":"instance","desc":"","lua_type":"Instance"},{"name":"ignoreList","desc":"","lua_type":"{ [string]: boolean }?"},{"name":"callback","desc":"","lua_type":"(active: boolean) -> ()\\n"}],"returns":[{"desc":"","lua_type":"() -> ()\\n"}],"function_type":"static","source":{"line":215,"path":"mirror/Kit.Utility.ClientObjects.luau"}},{"name":"setInstanceActive","desc":"Sets the `Instance`\'s activeness based on `active`.\\nInstances can have multiple activeness states, dictated by the `key` parameter.","params":[{"name":"scope","desc":"","lua_type":"Scope"},{"name":"instance","desc":"","lua_type":"Instance"},{"name":"key","desc":"","lua_type":"string"},{"name":"active","desc":"","lua_type":"boolean"}],"returns":[],"function_type":"static","source":{"line":237,"path":"mirror/Kit.Utility.ClientObjects.luau"}},{"name":"scanFolder","desc":"TODO explain this (idk the specifics of what it does)","params":[{"name":"targetScope","desc":"","lua_type":"Scope"},{"name":"path","desc":"","lua_type":"Instance"},{"name":"doNotIgnoreObjects","desc":"","lua_type":"boolean?"},{"name":"targetPath","desc":"","lua_type":"Instance?\\n"}],"returns":[],"function_type":"static","source":{"line":259,"path":"mirror/Kit.Utility.ClientObjects.luau"}}],"properties":[],"types":[],"name":"ClientObjects","desc":"A table of utility functions that can be used to speed up the process of writing repository scripts for client objects.","realm":["Client"],"source":{"line":12,"path":"mirror/Kit.Utility.ClientObjects.luau"}}')}}]);